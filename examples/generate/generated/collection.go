// Code generated by github.com/v1def/go-polybase. DO NOT EDIT.

package generated

import (
	"context"

	"github.com/v1def/go-polybase"
)

type Collection struct {
	Id                string  `json:"id"`
	Name              *string `json:"name"`
	LastRecordUpdated *string `json:"lastRecordUpdated"`
	Code              *string `json:"code"`
	PublicKey         *string `json:"publicKey"`
}
type ICollection interface {
	Constructor(ctx context.Context, input *CollectionConstructorInput) (*polybase.SingleResponse[Collection], error)
	UpdateCode(ctx context.Context, id string, input *CollectionUpdateCodeInput) (*polybase.SingleResponse[Collection], error)
}

type collection struct{ coll polybase.Collection }

func NewCollection(db polybase.Polybase) ICollection {
	return &collection{coll: db.Collection("Collection")}
}

type CollectionConstructorInput struct {
	Id   string `json:"id"`
	Code string `json:"code"`
}

func (c *collection) Constructor(ctx context.Context, input *CollectionConstructorInput) (*polybase.SingleResponse[Collection], error) {
	var response polybase.SingleResponse[Collection]
	return &response, c.coll.Create(ctx, polybase.ParseInput(input), &response)
}

type CollectionUpdateCodeInput struct {
	Code string `json:"code"`
}

func (c *collection) UpdateCode(ctx context.Context, id string, input *CollectionUpdateCodeInput) (*polybase.SingleResponse[Collection], error) {
	var response polybase.SingleResponse[Collection]
	return &response, c.coll.Record(id).Call(ctx, "updateCode", polybase.ParseInput(input), &response)
}
