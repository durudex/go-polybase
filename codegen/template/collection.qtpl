{% import (
	"github.com/v1def/go-polybase/polylang"

	"github.com/iancoleman/strcase"
) %}

{%- func Collection(id, coll string, funcs []*polylang.Function) -%}
type I{%s strcase.ToCamel(coll) %} interface {
	{%- for _, fc := range funcs -%}
	{%s strcase.ToCamel(fc.Name) %}(ctx context.Context {% stripspace %}
		{% if fc.Name != "constructor" %}, id string {% endif %},
		input *{%s strcase.ToCamel(coll) + strcase.ToCamel(fc.Name) %}Input
	{% endstripspace %})
	{%- endfor -%}
}

type {%s strcase.ToLowerCamel(coll) %} struct{ coll polybase.Collection }

func New{%s strcase.ToCamel(coll) %}(db polybase.Polybase) I{%s strcase.ToCamel(coll) %} {
	return &{%s strcase.ToLowerCamel(coll) %}{coll: db.Collection("{%s id %}")}
}
{% endfunc %}
